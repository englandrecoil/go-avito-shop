// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: items.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getItemByName = `-- name: GetItemByName :one
SELECT id, name, price FROM items
WHERE name = $1
`

func (q *Queries) GetItemByName(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByName, name)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const purchaseItemByID = `-- name: PurchaseItemByID :one
WITH item_price AS (
    SELECT price FROM items WHERE id = $2
),
updated_balance AS (
    UPDATE users
    SET balance = balance - (SELECT price FROM item_price)
    WHERE id = $1 AND balance >= (SELECT price FROM item_price)
    RETURNING id
)
INSERT INTO users_items (id, user_id, item_id, quantity)
SELECT gen_random_uuid(), $1, $2, 1
FROM updated_balance
ON CONFLICT (user_id, item_id) 
DO UPDATE SET quantity = users_items.quantity + EXCLUDED.quantity
RETURNING id, user_id, item_id, quantity
`

type PurchaseItemByIDParams struct {
	UserID uuid.UUID
	ItemID uuid.UUID
}

func (q *Queries) PurchaseItemByID(ctx context.Context, arg PurchaseItemByIDParams) (UsersItem, error) {
	row := q.db.QueryRowContext(ctx, purchaseItemByID, arg.UserID, arg.ItemID)
	var i UsersItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
	)
	return i, err
}
