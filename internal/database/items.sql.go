// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: items.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getItemByName = `-- name: GetItemByName :one
SELECT id, name, price FROM items
WHERE name = $1
`

func (q *Queries) GetItemByName(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByName, name)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const purchaseItemByID = `-- name: PurchaseItemByID :exec
WITH updated_balance AS (
    UPDATE users
    SET balance = balance - (SELECT price FROM items WHERE id = $2)
    WHERE id = $1
    AND balance >= (SELECT price FROM items WHERE id = $2)
    RETURNING id
)
INSERT INTO users_items (id, user_id, item_id, quantity)
VALUES (gen_random_uuid(), $1, $2, 1)
ON CONFLICT (user_id, item_id) 
DO UPDATE SET quantity = users_items.quantity + EXCLUDED.quantity
WHERE EXISTS (SELECT 1 FROM updated_balance)
`

type PurchaseItemByIDParams struct {
	UserID uuid.UUID
	ItemID uuid.UUID
}

func (q *Queries) PurchaseItemByID(ctx context.Context, arg PurchaseItemByIDParams) error {
	_, err := q.db.ExecContext(ctx, purchaseItemByID, arg.UserID, arg.ItemID)
	return err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE users
SET balance = balance - (SELECT price FROM items WHERE items.id = $2)
WHERE users.id = $1
`

type UpdateBalanceParams struct {
	ID   uuid.UUID
	ID_2 uuid.UUID
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateBalance, arg.ID, arg.ID_2)
	return err
}

const updateInventory = `-- name: UpdateInventory :exec
INSERT INTO users_items(user_id, item_id, quantity)
VALUES (
    $1,
    $2,
    1
)
ON CONFLICT(user_id, item_id)
DO UPDATE SET quantity = users_items.quantity + 1
`

type UpdateInventoryParams struct {
	UserID uuid.UUID
	ItemID uuid.UUID
}

func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) error {
	_, err := q.db.ExecContext(ctx, updateInventory, arg.UserID, arg.ItemID)
	return err
}
