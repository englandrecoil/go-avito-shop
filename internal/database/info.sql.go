// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: info.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getInventory = `-- name: GetInventory :many
SELECT items.name AS item_name, users_items.quantity
FROM users_items
INNER JOIN items on items.id = users_items.item_id
INNER JOIN users on users.id = users_items.user_id
WHERE user_id = $1
ORDER BY quantity DESC
`

type GetInventoryRow struct {
	ItemName string
	Quantity int32
}

func (q *Queries) GetInventory(ctx context.Context, userID uuid.UUID) ([]GetInventoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getInventory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInventoryRow
	for rows.Next() {
		var i GetInventoryRow
		if err := rows.Scan(&i.ItemName, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReceivedHistory = `-- name: GetReceivedHistory :many
SELECT users.username AS sender_name, amount AS received
FROM transactions 
INNER JOIN users on users.id = transactions.sender_id
WHERE receiver_id = $1
`

type GetReceivedHistoryRow struct {
	SenderName string
	Received   int32
}

func (q *Queries) GetReceivedHistory(ctx context.Context, receiverID uuid.UUID) ([]GetReceivedHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getReceivedHistory, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReceivedHistoryRow
	for rows.Next() {
		var i GetReceivedHistoryRow
		if err := rows.Scan(&i.SenderName, &i.Received); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentHistory = `-- name: GetSentHistory :many
SELECT users.username AS receiver_name, amount AS sent
FROM transactions
INNER JOIN users on users.id = transactions.receiver_id
WHERE sender_id = $1
`

type GetSentHistoryRow struct {
	ReceiverName string
	Sent         int32
}

func (q *Queries) GetSentHistory(ctx context.Context, senderID uuid.UUID) ([]GetSentHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getSentHistory, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSentHistoryRow
	for rows.Next() {
		var i GetSentHistoryRow
		if err := rows.Scan(&i.ReceiverName, &i.Sent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
